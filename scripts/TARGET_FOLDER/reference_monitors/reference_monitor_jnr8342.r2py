"""
reference_monitor_jnr8342.r2py
Author: Justin Rivera (jnr8342)
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None

        # Keeping track of end of file
        self.current_end_of_file = len(self.LPfile.readat(None, 0))
        self.end_of_file = self.current_end_of_file
        self.pending_end_of_file = -1

        self.file_closed = False

        # Lock for protecting against multithreading related exceptions
        self.lock = createlock()

    def readat(self, bytes, offset):
        # Acquire lock
        self.lock.acquire(True)

        # Attempt to read file
        try:
            file_contents = self.LPfile.readat(bytes, offset)
        except:
            # Release & raise
            self.lock.release()
            raise
            
        # Release & return
        self.lock.release()
        return file_contents
    
    def writeat(self, data, offset):
        # Acquire lock
        self.lock.acquire(True)

        # Check to make sure the file is not closed
        if self.file_closed:
            self.lock.release()
            raise FileClosedError("File is already closed!")

        # Check to make sure we're not writing past EOF
        if offset > self.end_of_file:
            self.lock.release()
            raise SeekPastEndOfFileError("Seek offset extends past the EOF!")
        
        # Minimum offset if 0
        if offset < 0:
            self.lock.release()
            raise RepyArgumentError("Min value is 0.")

        # Write any pending data
        if self.pending_data:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.current_end_of_file = self.end_of_file
            
        # Save pending data
        self.pending_data = data
        self.pending_offset = offset
        self.pending_end_of_file = len(data) + offset
        self.end_of_file = max(self.pending_end_of_file, self.current_end_of_file)

        # Release
        self.lock.release()

    def undo(self):
        # Acquire lock
        self.lock.acquire(True)

        # Clear pending variables
        self.pending_data = None
        self.pending_offset = None
        self.pending_end_of_file = -1
        self.end_of_file = self.current_end_of_file

        # Release lock
        self.lock.release()

    def close(self):
        # Acquire lock
        self.lock.acquire(True)

        # Write any remaining changes
        if self.pending_data:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            # Reset and leftover variables
            self.pending_data = None
            self.pending_offset = None
            self.pending_end_of_file = -1
            self.end_of_file = self.current_end_of_file

        self.LPfile.close()
        self.file_closed = True

        # Release lock
        self.lock.release()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()