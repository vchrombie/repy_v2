def beforeEach():
  # clean up if the file exists.
  if "testfile.txt" in listfiles():
    removefile("testfile.txt")

def terminate(t):
  def sleep_for():
    # after sleeping t sec, terminate the attack
    sleep(t)
    raise RuntimeError("reference monitor took more than 5 seconds => a bug was detected!\n")
  return sleep_for

createthread(terminate(10))

#Reading a closed file. FileClosedError Exception is thrown (Expected)
def fileClosed():
  #setup
  beforeEach()
  myfile = openfile("testfile.txt", True)
  myfile.writeat("first", 0)
  myfile.close()
  try:
    myfile.readat(None, 0)
  except FileClosedError:
    pass
  else:
    log("ERROR ATTACK | FileClosedError Exception is swallowed or not thrown.\n")

fileClosed()

exitall()