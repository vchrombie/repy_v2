# Attack Case 3: Boundary Conditions

# for referencemonitor in reference_monitor_j*; do echo $referencemonitor under test; for testcase in jl14678_attackcase3*; do python repy.py restrictions.default encasementlib.r2py $referencemonitor $testcase; done; done

# clean up if the file exists.
if "attack3.txt" in listfiles():
    removefile("attack3.txt")

def boundary_attack():
    try:
        # Open a file and write some initial data
        f = openfile("attack3.txt", True)
        initial_data = "InitialData"
        f.writeat(initial_data, 0)
        f.close()

        # Reopen the file and attempt to write at the beginning
        f = openfile("attack3.txt", False)
        f.writeat("AttackStart", 0)
        f.close()

        # Reopen the file and attempt to write at the very end
        f = openfile("attack3.txt", False)
        data_length = len(f.readat(None, 0))
        f.writeat("AttackEnd", data_length)
        f.close()

    except Exception as e:
        log("Error during boundary attack: " + str(e) + "\n")
        return

    # Check the content of the file to see if the data was written at the boundaries
    f = openfile("attack3.txt", False)
    data = f.readat(None, 0)
    f.close()

    if data.startswith("AttackStart") and data.endswith("AttackEnd"):
        log("[!]Attack Case 3 successful: Boundary condition attack compromised the reference monitor. Data in file: " + data + "\n")
    else:
        log("[*]Attack Case 3 failed: Boundary condition attack did not compromise the reference monitor." + "\n")

boundary_attack()