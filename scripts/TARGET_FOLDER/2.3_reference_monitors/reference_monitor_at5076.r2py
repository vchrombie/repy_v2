"""
Security Layer: A2.1

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 


Command on terminal:
py -2.7 repy.py restrictions.default encasementlib.r2py reference_monitor_at5076.r2py application.r2py

File Path:
C:\Users\atvie\repy_v2\A2-1
    
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    # ==================================================================
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)

	# create lock (writeat & undo)
	self.lock = createlock()

	# getting size of file, if file already has things written in it
	self.file_size = len(self.readat(None, 0))

	# ----------------------	Other Variables		-------------------
	# initialized for error checking and keeping track
	self.writeat_valid = False
	self.undo_valid = False
	self.close_valid = True
	self.old_data = ""
	self.old_offset = 0
	self.old_file_size = self.file_size
	# -----------------------------------------------------------------

    	self.pending_data = None
    	self.pending_offset = None
    # ==================================================================


    # ==================================================================
    def readat(self, bytes, offset):
    	# Read from the file using the sandbox's readat...
	return self.LPfile.readat(bytes, offset)
    # ==================================================================


    # ==================================================================
    def writeat(self, data, offset):
	self.lock.acquire(True)

	# if we're closing, we're just comitting our last valid writeat
	# so don't need to check for exceptions, and won't need to update
	# length of our file

	# --------------------  EXCEPTIONS  ---------------------------
	# ~EXCEPTION: RepyArgumentError
	if offset < 0:
		# raise exception & release lock
		self.lock.release()
		self.LPfile.writeat("Null", -1)

	# ~EXCEPTION: FileClosedError
	elif not self.close_valid: 
		# raise exception & release lock
		self.lock.release()
		self.LPfile.close()
			
	# ____________ UPDATING LENGTH (if valid) ____________________
	# type is checked underneath
	# checking if the offset is positive, and that we're not
	# trying to write past EOF			
	
	if offset >= 0 and self.file_size >= offset:
		self.old_file_size = self.file_size
		if (len(data) + offset) > self.file_size:
			self.file_size = len(data) + offset
	# ____________________________________________________________

	# ~EXCEPTION: SeekPastEndOfFileError
	elif self.file_size < offset:
		# raise exception & release lock
		self.lock.release()
		self.LPfile.writeat("Null", offset)
	# ---------------------------------------------------------------

	# make writeat permanent time to writeat
	if self.writeat_valid:
		# write old stuff into file
		self.LPfile.writeat(self.pending_data, self.pending_offset)

		# holding onto these in case of undo
		self.old_data = self.pending_data
		self.old_offset = self.pending_offset


	# valid writeat to come
	self.writeat_valid = True
	
	# hold onto the next valid data to be written
	self.pending_data = data
	self.pending_offset = offset
	self.undo_valid = True

	self.lock.release()
    # ==================================================================


    # ==================================================================
    def undo(self):
	self.lock.acquire(True)

	# if file is not already closed, otherwise do nothing
	if self.close_valid:
		if self.undo_valid:	
			self.file_size = self.old_file_size
			self.pending_data = self.old_data
			self.pending_offset = self.old_offset
			self.undo_valid = False

	self.lock.release()
    # ==================================================================


    # ==================================================================
    def close(self):
	self.lock.acquire(True)
	if self.close_valid:
		# commit values on valid close
		if self.pending_data != None:
			self.LPfile.writeat(self.pending_data, self.pending_offset)
		self.close_valid = False
	try:
		self.LPfile.close()
	finally:
		self.lock.release()

    # ==================================================================

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()