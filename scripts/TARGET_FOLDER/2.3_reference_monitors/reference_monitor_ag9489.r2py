"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 

Author: Abhay Garg
Net-Id: ag9489
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

lock = createlock()
class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.file_size = len(self.LPfile.readat(None, 0))
        self.pending_data = None
        self.pending_offset = None
        self.new_file_size = self.file_size
        self.file_closed = False
        


    def readat(self, bytes, offset):
        lock.acquire(True)
        content = ""
        try:
            # Read from the file using the sandbox's readat...
            content = self.LPfile.readat(bytes, offset)
        except:
            raise
        finally:
            lock.release()
        
        return content

 
    def writeat(self, data, offset):
        # lock to ensure no other write operation can take place until the lock is released.
        lock.acquire(True)
        try:
            # Writing at negative offset is an invalid operation
            if (offset < 0):
                raise RepyArgumentError
            
            # Writing a closed file is an invalid operation
            if (self.file_closed):
                raise FileClosedError

            # Writing at offset beyond file size is an invalid operation
            if (offset > self.new_file_size):
                raise SeekPastEndOfFileError

            # The reference monitor performs the previous write operation when another file write/ file close operation is called.
            if self.pending_data is not None:
                # If a subsequest writeat operation is executed, write the pending_data first
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.file_size = self.new_file_size
            
            # checks if data is present. If yes, then update the pending data and new file size
            if(data):
                self.pending_data = data
                pending_data_len = len(data)
                self.pending_offset = offset
                if(offset + pending_data_len > self.file_size):
                    self.new_file_size = offset + pending_data_len
                else:
                    self.new_file_size = self.file_size
        except:
            raise
        finally:
            lock.release()
    

    def undo(self):
        #reverse only most recent edit
        self.pending_data = None
        self.pending_offset = None
        self.new_file_size = self.file_size
    

    def close(self):
        # lock to ensure no other write operation can take place until the lock is released.
        lock.acquire(True)
        try:
            if self.pending_data is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.filesize = self.new_file_size
            self.LPfile.close()
            self.file_closed = True
        except:
            raise
        finally:
            lock.release()
        

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()