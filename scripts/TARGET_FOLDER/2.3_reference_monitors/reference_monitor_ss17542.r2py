"""
This security layer inadequately handles the undo functionality
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"
class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        
        self.current_e = len(self.LPfile.readat(None, 0))
        self.pending_end = -1
        self.file_closed = False
        self.lock = createlock()
        self.e_of = self.current_e
    def readat(self, bytes, offset):
        self.lock.acquire(True) 
        try:
            file_contents = self.LPfile.readat(bytes, offset)
        finally:
            self.lock.release()
            
        
        return file_contents
    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            if offset > self.e_of: 
                raise SeekPastEndOfFileError("Seek offset extends past the EOF!")
            
            if offset < 0: 
                raise RepyArgumentError("Min value is 0.")
            if self.file_closed: 
                raise FileClosedError("File is already closed!")
            if self.pending_data:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.current_e = self.e_of
                
            self.pending_data = data
            self.pending_offset = offset
            self.pending_end = len(data) + offset
            self.e_of = max(self.pending_end, self.current_e)
        finally:
            self.lock.release()
    def undo(self):
        self.lock.acquire(True)
        try:
            self.pending_data = None
            self.pending_offset = None
            self.pending_end = -1
            self.e_of = self.current_e 
        finally:
            self.lock.release()
    def close(self):
        self.lock.acquire(True)
        
        try:
            if self.pending_data:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.pending_data = None
            self.pending_offset = None
            self.pending_end = -1
            self.e_of = self.current_e
            self.LPfile.close()
            self.file_closed = True
        finally:
            self.lock.release()
             
def LPopenfile(filename, create):
    return LPFile(filename, create)
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}
CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}
secure_dispatch_module()