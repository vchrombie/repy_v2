"""
<- security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py reference_monitor_uhm202.r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False



        self.threadLock = createlock()
        self.threadLock.acquire(True)
        try:
            self.LPfile = openfile(filename, create)
            self.pending_data = None
            self.pending_offset = None
            self.closedFlag = False
            self.EOF = 0
        except RepyException:
            raise
        finally:
            self.threadLock.release()

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        # read should be unable to read pending data only wahts in teh file so.

        self.threadLock.acquire(True)
        try:
            if self.closedFlag == False and 0 <= offset <= self.EOF:
                return self.LPfile.readat(bytes, offset)
            else:
                self.threadLock.release()
                raise
                return -1
         except RepyException:
            raise
         finally:
            self.threadLock.release()

    def writeat(self, data, offset):

        self.threadLock.acquire(True)
        try:
            if self.closedFlag == False and 0 <= offset <= self.EOF:
                if self.pending_data != None and self.pending_offset != None:
                    self.EOF += self.pending_data.len()
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                    self.pending_data = data
                    self.pending_offset = offset
                else:
                    self.pending_data = data
                    self.pending_offset = offset
            else:
                self.threadLock.release()
                raise
                return -1
        except RepyException:
            raise
        finally:
            self.threadLock.release()

    def undo(self):
        self.threadLock.acquire(True)
        try:
            if self.closedFlag == False:
                self.pending_data = None
                self.pending_offset = None
        except RepyException:
            raise
        finally:
            self.threadLock.release()

    def close(self):
        self.threadLock.acquire(True)
        try:
            if self.pending_data != None and self.pending_offset != None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)

            self.closedFlag = True
            self.LPfile.close()
        except RepyException:
            raise
        finally:
            self.threadLock.release()

def LPopenfile(filename, create):

    if filename == "reference_monitor_uhm202.r2py":
        return -1
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()