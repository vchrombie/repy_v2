"""
<Author: Pratham Gupta pg2441>
<Skeleton Code: Justin Cappos>
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


OPEN_FILES_LOCK = createlock()
OPEN_FILES = set([])

class LPFile():
    def __init__(self, filename, create):

        # globals
        mycontext['debug'] = False
        self.thread_lock = createlock()
        self.fobj = None
        self.filesize = 0
        self.future_filesize = 0
        self.filename = filename

        if filename in OPEN_FILES:
            raise FileInUseError
        
        self.LPfile = openfile(filename, create)

        OPEN_FILES_LOCK.acquire(True)
        self.fobj = True
        self.pending_data = None
        self.pending_offset = None

        self.filesize = len(self.LPfile.readat(None, 0))
        OPEN_FILES.add(filename)
        self.future_filesize = self.filesize

        OPEN_FILES_LOCK.release()

    def readat(self, bytes, offset):
        data = self.LPfile.readat(bytes, offset)
        return data

    def writeat(self, data, offset):

        self.thread_lock.acquire(True)
        # try:
        if offset < 0:
            self.thread_lock.release()
            raise RepyArgumentError
        
        if self.fobj == None:
            self.thread_lock.release()
            raise FileClosedError

        if (offset > self.future_filesize):
            self.thread_lock.release()
            raise SeekPastEndOfFileError

        if self.pending_offset != None and self.pending_data != None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)

            if ((self.future_filesize) > self.filesize):
                self.filesize = self.future_filesize

        self.pending_data = data
        self.pending_offset = offset

        if ((self.pending_offset + len(self.pending_data)) > self.filesize):
            self.future_filesize = self.pending_offset + len(self.pending_data)

        # except (RepyException) as error:
        #     pass

        # finally:
        self.thread_lock.release()

    def undo(self):
        try:
            self.future_filesize = self.filesize
        except TypeError as error:
            pass
        finally:
            self.pending_data = None
            self.pending_offset = None

    def close(self):

        OPEN_FILES_LOCK.acquire(True)
        self.thread_lock.acquire(True)
        try:
            fobj = self.fobj
            if fobj:
                if self.pending_offset != None and self.pending_data != None:
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.LPfile.close()
                self.fobj = None
                OPEN_FILES.remove(self.filename)
            else:
                raise FileClosedError
        except (RepyArgumentError, SeekPastEndOfFileError) as error:
            pass
        finally:
            self.thread_lock.release()
            OPEN_FILES_LOCK.release()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()