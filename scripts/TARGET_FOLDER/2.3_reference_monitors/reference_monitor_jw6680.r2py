"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.file_size = len(self.LPfile.readat(None,0))
        self.pending_data = None
        self.pending_offset = None
        self.pending_filesize = self.file_size
        self.is_closed = False
        self.lock = createlock()
        

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        self.lock.acquire(True)
        try:
            return self.LPfile.readat(bytes, offset)
        finally:
            self.lock.release()
        

    def writeat(self, data, offset):
        #check if closed, check offset
        if self.is_closed:
            raise FileClosedError("File is closed.")
        self.lock.acquire(True)

        try:
            if offset < 0:
                raise RepyArgumentError("Negative read offset specified!")
            if offset > self.pending_filesize:
                raise OutOfBoundsWriteError("Write is out of bounds.")
            if self.pending_data is not None and self.pending_offset is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.file_size = self.pending_filesize
            
            self.pending_data = data
            self.pending_offset = offset
            self.pending_filesize = max(self.pending_filesize,self.pending_offset
            + len(self.pending_data))
        finally:
            self.lock.release()

    def undo(self):
        #check if closed, check offset
        if self.is_closed:
            return
        self.lock.acquire(True)
        try:
            self.pending_data = None
            self.pending_offset = None
            self.pending_filesize = self.file_size
        finally:
            self.lock.release()

    def close(self):
        #check if closed, check offset
        if self.is_closed:
            raise FileClosedError("File is closed.")
        self.lock.acquire(True)
        try:
            if self.pending_data is not None and self.pending_offset is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.is_closed = True
            self.pending_data = None
            self.pending_offset = None
            self.pending_filesize = 0
            self.file_size = 0
            self.LPfile.close()
        finally:
            self.lock.release()



class OutOfBoundsWriteError(Exception):
    pass

class FileClosedError(Exception):
    pass

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()