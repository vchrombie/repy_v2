"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        # track file state
        self.is_open = True
        # track file length and previous length for undo call
        self.file_length = len(self.LPfile.readat(None,0))
        self.prev_length = self.file_length
        # write lock to avoid race conditions, notably regarding file state and length
        self.w_lock = createlock()

    def readat(self, bytes, offset):
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        self.w_lock.acquire(True)
        try:
            # check valid offset and data 
            if(offset < 0) or (type(offset) != int) or (type(data) != str):
                raise RepyArgumentError
            # check if file is already closed
            if(self.is_open == False):
                raise FileClosedError
            # check that offset does not extend past EOF
            if(offset > self.file_length):
                raise SeekPastEndOfFileError
            # write to file if pending data exists
            if(self.pending_data):
                self.LPfile.writeat(self.pending_data, self.pending_offset)
            # update file length if pending data extends file length
            if(offset + len(data) >= self.file_length):
                self.prev_length = self.file_length
                self.file_length = offset + len(data)
            self.pending_data = data
            self.pending_offset = offset
        finally:
            self.w_lock.release()

    def undo(self):
        self.w_lock.acquire(True)
        try:
            if(self.is_open):
                # if previous write extended file length, reset file length without expensive API call
                if((self.pending_data) and (len(self.pending_data) + self.pending_offset) == self.file_length):
                    self.file_length = self.prev_length
                self.pending_data = None
                self.pending_offset = None
        finally:
            self.w_lock.release()

    def close(self):
        self.w_lock.acquire(True)
        try:
            # check if file is already closed
            if(self.is_open == False):
                raise FileClosedError
            # write any existing data to file
            if(self.pending_data):
                self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.is_open = False
            self.LPfile.close()
        finally:
            self.w_lock.release()


def LPopenfile(filename, create):
    return LPFile(filename, create)


# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()