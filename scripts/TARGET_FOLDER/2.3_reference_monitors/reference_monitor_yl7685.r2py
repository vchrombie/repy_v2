"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        #do try to make sure this file is openable.
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        #create a check to see the length of the file
        self.max_size = len(self.LPfile.readat(None, 0))
        #create a temp value to hold the previous max_size
        self.temp_size = 0
        #create a bool to check if file is already close.
        self.isClose = False


    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        #the readat is already complete and no modification is needed.
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        if self.isClose:
            self.LPfile.close()
        else:
            #first create the lock
            self.lock = createlock()
            self.lock.acquire(True)
            #check if the input offset is out of bound.
            if (offset < 0 or offset > self.max_size):
                #this means the offset is invalid.
                self.LPfile.writeat(data, offset)
            else:
                #this means the offset is valid
                #now, first check if the previous input is none
                if (self.pending_data != None) and (self.pending_offset != None):
                    #if it is not none, then write the previous on file
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.pending_data = data
                self.pending_offset = offset
                #now, we need to end this writeat by updating the max_size
                #first, no matter the size change or not, store current max_size to temp_size
                self.temp_size = self.max_size
                #calculate the new max size with new pending data
                new_temp_length = offset + len(data)
                if (new_temp_length > self.max_size):
                    #in this case, update the max length
                    self.max_size = new_temp_length
                #in other case, keep the max_size unchanged.
            #last, no matter which case, release the lock
            self.lock.release()

    def undo(self):
        if self.isClose:
            self.LPfile.close()
        else:
            #These will undo the last change.
            #First as always, apply the lock here.
            self.lock = createlock()
            self.lock.acquire(True)
            #Here, replace the max_size with the previous value if undo will be performed
            if (self.pending_data != None) and (self.pending_offset != None):
                self.max_size = self.temp_size
                self.temp_size = 0
            #now, no matter what, set both value to None
            self.pending_data = None
            self.pending_offset = None
            
            #Last, release the lock
            self.lock.release()

    def close(self):
        #First check if file is already closed
        if self.isClose:
            self.LPfile.close()
        #Next, Update the isclose value to true
        self.isClose = True
        #As Instruction case 2, need to perform writeat when file is closed.
        #since the offset and data is garetee to be valid, only need to check if it is none.
        if (self.pending_data != None) and (self.pending_offset != None):
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        #Now, close the file.
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()