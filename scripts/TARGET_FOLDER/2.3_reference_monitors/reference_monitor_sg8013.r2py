"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
    foreach ($referencemonitor in Get-ChildItem reference_monitor_*) { foreach ($testcase in Get-ChildItem mr7172_attackcase*) { python repy.py restrictions.default encasementlib.r2py $referencemonitor.Name $testcase.Name } }
    for attackcase in *_attackcase*; do
    echo "Testing against $attackcase";
    python ../repy.py ../restrictions.default ../encasementlib.r2py reference_monitor_sg8013.r2py $attackcase;
done;
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.file_size = len(self.LPfile.readat(None, 0))
        self.file_closed = False
        self.waiting = self.file_size
        self.locked = createlock()



    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        self.locked.acquire(True) 
        try:
            if (offset < 0):
                raise RepyArgumentError
                
            if (self.file_closed):
                raise FileClosedError 


            if (offset > self.waiting):
                raise SeekPastEndOfFileError
            
            if self.pending_data is not None and self.pending_offset is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.file_size = self.waiting
                #log("pending data", self.pending_data)
                #log("pending offset", self.pending_offset)

                
            self.pending_data = data
            self.pending_offset = offset

            if self.pending_offset + len(self.pending_data) > self.waiting:
                self.waiting = self.pending_offset + len(self.pending_data)



            #log("1pending data\n", self.pending_data)
            #log("1pending offset\n", self.pending_offset)
            

        except:
            raise
        finally:

            self.locked.release()    
        
    def undo(self):
        self.locked.acquire(True)
        try:
                self.pending_data = None
                self.pending_offset = None

        except Exception as e:
            raise
        finally: 
            self.waiting = self.file_size
            self.locked.release()  

    def close(self):
        self.locked.acquire(True)
         
        try:
            if self.pending_data is not None and self.pending_offset is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                if ((self.waiting) > self.file_size):
                    self.file_size = self.waiting
            self.file_closed = True

            self.LPfile.close()
            self.file_closed = True
            self.pending_data = None
            self.pending_offset = None

        except:
            raise
        finally:
            self.locked.release() 

def LPopenfile(filename, create):

    return LPFile(filename, create)
        

        

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()






