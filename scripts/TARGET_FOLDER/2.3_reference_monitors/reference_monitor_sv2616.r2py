TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def _init_(self, filename, create):
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.closeOrNot = False
        self.length_file = len(self.LPfile.readat(None, 0))

    def readat(self, bytes, offset):
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        if (offset < 0) or (type(data) != str) or self.closeOrNot:
            return

        if self.pending_data is not None:
            end_of_file = max(self.length_file, self.pending_offset + len(self.pending_data))
        else:
            end_of_file = self.length_file
        if offset > end_of_file:
            return

        if self.pending_data != None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            pending_file_end = self.pending_offset + len(self.pending_data)
            self.length_file = max(self.length_file, pending_file_end)
            self.pending_data = None
            self.pending_offset = None

        self.pending_data = data
        self.pending_offset = offset

    def undo(self):
        # wipe pending data and offset if open
        if self.closeOrNot:
            return
        self.pending_data = None
        self.pending_offset = None

    def close(self):
        if self.pending_data != None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.pending_data = None
            self.pending_offset = None

        self.closeOrNot = True
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()