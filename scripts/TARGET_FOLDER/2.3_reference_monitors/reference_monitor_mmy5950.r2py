"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
  def __init__(self, filename, create):
    # globals
    mycontext['debug'] = False
    self.lock = createlock()
    self.pending_data = None
    self.pending_offset = None
    self.closed = False
    self.eof = None

    #cleanup
    #if filename in listfiles():
    #  removefile(filename)

    #file open
    self.lock.acquire(True)
    try:
      self.LPfile = openfile(filename, create)
      #set eof
      self.eof = 0
      while True:
        try:
	  self.LPfile.readat(0, self.eof)
	except SeekPastEndOfFileError:
	  pass
	  break
        self.eof = self.eof + 1
      self.eof = self.eof - 1
    except:
      raise
    finally:
      self.lock.release()

  def readat(self, bytes, offset):
    self.lock.acquire(True)
    try:
      if bytes == None: #read until end of file
        if offset > self.eof:
          raise SeekPastEndOfFileError()
      else:
        if bytes + offset > self.eof:
          raise SeekPastEndOfFileError()

      data = self.LPfile.readat(bytes, offset)
    except:
      raise
    finally:
      self.lock.release()
    return data

  def writeat(self, data, offset):
    try:
      self.lock.acquire(True)
      if offset < 0 or not type(data) is str:
        raise RepyArgumentError
      if offset > self.eof:
        raise SeekPastEndOfFileError
      if self.closed:
        raise FileClosedError
      #test that there is data in the buffer
      if self.pending_data != None and self.pending_offset != None:
        self.LPfile.writeat(self.pending_data, self.pending_offset)
      self.pending_data = data
      self.pending_offset = offset
      self.eof += len(data)
    except:
      raise
    finally:
      self.lock.release()


  def undo(self):
    try:
      self.lock.acquire(True)
      self.eof -= len(self.pending_data)
      self.pending_data = None
      self.pending_offset = None
    except:
      raise
    finally:
      self.lock.release()

  def close(self):
    try:
      self.lock.acquire(True)
      if self.pending_data != None and self.pending_offset != None:
        self.LPfile.writeat(self.pending_data, self.pending_offset)
      self.LPfile.close()
      self.closed = True
    except:
      raise
    finally:
      self.lock.release()

def LPopenfile(filename, create):
  return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
  "obj-type": LPFile,
  "name": "LPFile",
  "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
  "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
  "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
  "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
  TYPE: OBJC,
  ARGS: (str, bool),
  EXCP: Exception,
  RETURN: sec_file_def,
  TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()
