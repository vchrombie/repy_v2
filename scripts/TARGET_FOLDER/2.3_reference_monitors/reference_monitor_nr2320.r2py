"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.closed = False
        self.currentOffset = 0
        fileSize = len(self.LPfile.readat(None, 0))
        if fileSize > 0:
            self.currentOffset = fileSize
        self.soonToBeOffset = 0
        self.lock = createlock()

    def readat(self, bytes, offset):
        if (not isinstance(offset, int)) or offset < 0 or offset <0:
            raise RepyArgumentError
        if self.closed:
            raise FileClosedError
        if bytes == None:
            bytes = self.currentOffset
        if bytes >= 0 and offset >= 0:
            if offset <= self.currentOffset:
                return self.LPfile.readat(bytes, offset)
            else:
                raise SeekPastEndOfFileError
        else:
            raise RepyArgumentError

    def writeat(self, data, offset):
        self.lock.acquire(True)
        if (not isinstance(data, str)) or offset < 0 or (not isinstance(offset, int)):
            self.lock.release()
            raise RepyArgumentError
        if not self.closed:
            if self.pending_data != None:
                if self.pending_offset < self.currentOffset:
                    if self.pending_offset + len(self.pending_data) > self.currentOffset:
                        self.soonToBeOffset = self.pending_offset + len(self.pending_data)
                else:
                    self.soonToBeOffset = len(self.pending_data) + self.currentOffset
                if offset > self.soonToBeOffset:
                    self.lock.release()
                    raise SeekPastEndOfFileError
            if offset <= self.soonToBeOffset:
                if self.pending_data != None and self.pending_offset != None:
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                    if self.soonToBeOffset > 0:
                        self.currentOffset = self.soonToBeOffset
            else:
                if self.currentOffset == 0 and offset > 0:
                    self.lock.release()
                    raise SeekPastEndOfFileError
                if self.pending_data == None:
                    if offset > self.currentOffset:
                        self.lock.release()
                        raise SeekPastEndOfFileError
            self.pending_data = data
            self.pending_offset = offset
            self.lock.release()
        else:
            self.lock.release()
            raise FileClosedError

    def undo(self):
        self.lock.acquire(True);
        self.pending_data = None
        self.pending_offset = None
        self.lock.release()

    def close(self):
        self.lock.acquire(True)
        if self.closed:
            self.lock.release()
            raise FileClosedError
        self.closed = True;
        if self.pending_data != None and self.pending_offset != None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.LPfile.close()
        self.lock.release()
        

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()