"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = True  # Enable debugging
        self.LPfile = openfile(filename, create)
        self.eof_offset = self.LPfile.readat(None, 0)  # determine the EOF
        self.pending_data = None
        self.pending_offset = None
        self.last_written_data = None
        self.last_written_offset = None
        self.original_data_before_last_write = None

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.LPfile.readat(bytes, offset)


    def writeat(self, data, offset):
        if offset > self.eof_offset:
            raise SeekPastEndOfFileError("Trying to write beyond EOF!")

        # Store the original data before writing new data (for undo purposes)
        self.original_data_before_last_write = self.LPfile.readat(len(data), offset)

        # Commit the pending data, if any
        self.commit_pending()

        # Save the provided data as the pending data
        self.pending_data = data
        self.pending_offset = offset
        #log(f"Write at offset {offset} with data {data}.")
    def commit_pending(self):
        """Commit the pending write to the file."""
        if self.pending_data is not None:
          # Update eof_offset if writing beyond current EOF
            self.eof_offset = max(self.eof_offset, self.pending_offset + len(self.pending_data))

            self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.last_written_data = self.pending_data
            self.last_written_offset = self.pending_offset
            self.pending_data = None
            self.pending_offset = None

    def undo(self):
        if self.pending_data is not None:
            log("Undoing pending write.")
            self.pending_data = None
            self.pending_offset = None
        elif self.last_written_data is not None:
            # Handle the EOF
            self.eof_offset -= len(self.last_written_data)
            # Instead of overwriting with spaces, revert to original data
            self.LPfile.writeat(self.original_data_before_last_write, self.last_written_offset)
            #log(f"Undoing last write. Restored data: {self.original_data_before_last_write}")
            self.last_written_data = None
            self.last_written_offset = None
            self.original_data_before_last_write = None

    def close(self):
        self.commit_pending()
        log("Closing file.")
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)


# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()
