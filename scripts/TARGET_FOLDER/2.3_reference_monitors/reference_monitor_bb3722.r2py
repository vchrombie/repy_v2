# Constants for security layer
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

# Create a lock
o = createlock()

# LPFile class for file operations
class LPFile():
    def __init__(self, filename, create):
        # Set the global context
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.filesize = len(self.LPfile.readat(None,0))
        self.pending_data = None
        self.pending_offset = None
        self.pending_file_size = self.filesize
        self.is_file_closed = False


    def readat(self, bytes, offset):
        o.acquire(True)
        try:
            if offset < 0:
                raise ValueError("offset should not be negetive!")
            read_output = self.LPfile.readat(bytes, offset)
        except:
            raise
        finally:
            o.release()
        return read_output


    def writeat(self, data, offset):
        o.acquire(True)
        if self.is_file_closed or offset < 0 or offset > self.pending_file_size:
            self.LPfile.writeat(data,offset)
        if self.pending_data is not None and self.pending_offset is not None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.filesize = self.pending_file_size
        self.pending_data = data
        self.pending_offset = offset
        self.pending_file_size = max(self.pending_file_size,self.pending_offset + len(self.pending_data))
        o.release()

    def undo(self):
        self.pending_data = None
        self.pending_offset = None
        self.pending_file_size = self.filesize

    def close(self):
        if self.pending_data is not None and self.pending_offset is not None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.file_closed = True
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()