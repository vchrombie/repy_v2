TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

def is_valid_filename(filename):
    """
    Check if the filename starts with a lowercase alphanumeric string and ends with 'txt'.
    """
    if '\\' in filename:
        return False
    components = filename.split('.')
    if len(components) == 2:
        prefix, extension = components
        return prefix.isalnum() and prefix.islower() and extension == 'txt'
    return False

class LPFile():
    def __init__(self, filename, create):
        if not is_valid_filename(filename):
            raise RepyArgumentError("Invalid filename. Filename must start with a lowercase alphanumeric string and end with 'txt'.")
        self._validate_file_path(filename)
        self.remove_associated_files(filename)
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'
        self.temp_file = filename
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)
        self.temp_file = openfile(self.temp_file, create)
        self.closed = False
        self.pending_data = []  # List to keep track of previous data
        self.pending_offset = []  # List to keep track of previous offsets
        self.pending_buf_length = []
        self.buffered_data = None  # New buffer for data
        self.buffered_offset = None  # New buffer for offset
        self.has_pending_write = False  # New flag
        self.is_closed = False
        self.Afile.filelock = createlock()
        self.Bfile.filelock = createlock()
        ogf = self.Afile.readat(None, 0)
        if ogf is not None:
            self.og_length = len(ogf)
        else:
            self.og_length = 0
        self.buf_length = self.og_length
    
    def readat(self, bytes, offset):
        self._check_file_state()

        if offset < 0 or (bytes is not None and bytes < 0):
            raise ValueError("Negative offset not supported.")

        self.Afile.filelock.acquire(True)
        if bytes is None:
            end_position = self.buf_length
        else:
            end_position = offset + bytes
        if end_position > self.buf_length:
            self.Afile.filelock.release()
            raise SeekPastEndOfFileError("Attempted to read past the end of the file")
        data = self.Afile.readat(bytes, offset)
        self.Afile.filelock.release()
        return data

    def _validate_file_path(self, filename):
        # Basic file path validation and sanitization
        for char in r'\/:*?"<>|':
            if char in filename:
                raise Exception("Invalid characters in file path")

    def writeat(self, data, offset):
        """Write data to a file at a given offset."""
        log("Before writeat: {}".format(self.Afile.readat(None, 0)))
        self._check_file_state()
        self.Afile.filelock.acquire(True)
        
        try:
            if self.has_pending_write:  # If there's buffered data, write it first
                if self.buffered_offset < 0:
                    raise RepyArgumentError("Offset cannot be negative.")
                    
                # Check if padding is needed for buffered data
                if self.buffered_offset > self.buf_length:
                    padding_length = self.buffered_offset - self.buf_length
                    padding = b' ' * padding_length
                    
                    # Store the current data and offset before appending the padding
                    original_padding_data = b' ' * padding_length
                    self.pending_data.append(original_padding_data)
                    self.pending_offset.append(self.buf_length)
                    self.pending_buf_length.append(self.buf_length + padding_length)
                    
                    self.Afile.writeat(padding, self.buf_length)
                    self.buf_length += padding_length
                
                # Store the current data and offset for buffered data before writing
                original_data_length = len(self.buffered_data)
                original_data = self.Afile.readat(original_data_length, self.buffered_offset) or b' ' * original_data_length
                self.pending_data.append(original_data)
                self.pending_offset.append(self.buffered_offset)
                self.pending_buf_length.append(self.buf_length)

                self.Afile.writeat(self.buffered_data, self.buffered_offset)
                        
                if self.buffered_offset + len(self.buffered_data) > self.buf_length:
                    self.buf_length = self.buffered_offset + len(self.buffered_data)

                self.has_pending_write = False  # Reset the flag

            # Set the buffered data and offset with current write data
            self.buffered_data = data
            self.buffered_offset = offset
            self.has_pending_write = True  # Set the flag

        finally:
            self.Afile.filelock.release()
            log("After writeat: {}".format(self.Afile.readat(None, 0)))

    def remove_associated_files(self, filename):
        """Remove the associated .a and .b files if the main file doesn't exist."""
        existing_files = listfiles()  # Get a list of all files
    
        # Ensure filename is a string
        filename_str = str(filename)

        if filename_str not in existing_files:
            a_file = filename_str + '.a'
            b_file = filename_str + '.b'
            if a_file in existing_files:
                removefile(a_file)
            if b_file in existing_files:
                removefile(b_file)

    def undo(self):
        """Undo the last write operation."""
        log("Before undo: {}".format(self.Afile.readat(None, 0)))
        if self.closed:
            return
        self._check_file_state()
        self.Afile.filelock.acquire(True)
        try:
            if not self.pending_data:
                #log("Nothing to undo!")
                return
                
            # Pop the last written data and its offset
            last_written_data = self.pending_data.pop()
            last_offset = self.pending_offset.pop()

            # Restore the previous original data and write it back
            prev_original_data = self.Afile.readat(len(last_written_data), last_offset)
            self.Afile.writeat(prev_original_data, last_offset)

            # Adjust buffer length
            if self.pending_buf_length:
                self.buf_length = self.pending_buf_length.pop()
            else:
                self.buf_length = self.og_length
        finally:
            self.Afile.filelock.release()
            log("After undo: {}".format(self.Afile.readat(None, 0)))

    def close(self):
        """Close the file and finalize any pending operations."""
        self._check_file_state()
        self.Afile.filelock.acquire(True)
        try:
            # 1. Committing the last buffered write operation
            if self.has_pending_write:
                if self.buffered_offset < 0:
                    raise RepyArgumentError("Offset cannot be negative.")
                if self.buffered_offset > self.buf_length:
                    padding_length = self.buffered_offset - self.buf_length
                    padding = b'\0' * padding_length
                    self.Afile.writeat(padding, self.buf_length)
                    self.buf_length += padding_length
                self.Afile.writeat(self.buffered_data, self.buffered_offset)
                if self.buffered_offset + len(self.buffered_data) > self.buf_length:
                    self.buf_length = self.buffered_offset + len(self.buffered_data)
                self.has_pending_write = False  # Reset the flag

            # 2. Clearing buffered data and undo lists
            self.buffered_data = None
            self.buffered_offset = None
            self.pending_data = []
            self.pending_offset = []
            self.pending_buf_length = []

            # Closing the files
            self.Afile.close()
            self.Bfile.close()
            self.temp_file.close()
            self.closed = True  # Mark the file as closed
            self.remove_associated_files(self.temp_file)
        finally:
            self.Afile.filelock.release()

    def _check_file_state(self):
        """Check if the file is closed and raise an appropriate exception if it is."""
        if self.closed:
            raise Exception("The file is already closed!")

def LPopenfile(filename, create):
  return LPFile(filename, create)

sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": FUNC, "args": None, "exceptions": None, "return": None, "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close},
    "remove_associated_files": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.remove_associated_files}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

secure_dispatch_module()
