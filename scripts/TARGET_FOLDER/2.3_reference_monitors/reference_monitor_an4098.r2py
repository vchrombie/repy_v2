TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.max_file_size = 1000000
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        try:
            self.current_filesize = len(self.LPfile.readat(None, 0))
        except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError) as error:
            pass
        self.is_closed = False
        self.new_filesize = self.current_filesize
        self.lock = createlock()

    def readat(self, bytes, offset):
        self.lock.acquire(True)
        try:
            if offset < 0 or (bytes < 0 and bytes is not None):
                raise RepyArgumentError
            elif self.is_closed:
                raise FileClosedError
            elif offset > self.new_filesize:
                raise SeekPastEndOfFileError
            else:
                return self.LPfile.readat(bytes, offset)
        finally:
            self.lock.release()

    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            if offset < 0 or not isinstance(data, str) or not isinstance(offset, (int, long)):
                raise RepyArgumentError
            elif self.is_closed:
                raise FileClosedError
            elif offset > self.new_filesize:
                raise SeekPastEndOfFileError
            else:
                if self.pending_data is not None and self.pending_offset is not None:
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                    if self.new_filesize > self.current_filesize:
                        self.current_filesize = self.new_filesize

                self.pending_data = data
                self.pending_offset = offset
                if ((self.pending_offset + len(self.pending_data)) > self.current_filesize):
                    self.new_filesize = self.pending_offset + len(self.pending_data)
                else:
                    self.new_filesize = self.current_filesize
        finally:
            self.lock.release()

    def undo(self):
        self.lock.acquire(True)
        try:
            if self.is_closed:
                pass
            else:
                if self.pending_data is not None and self.pending_offset is not None:
                    self.new_filesize = self.current_filesize
                    self.pending_data = None
                    self.pending_offset = None
        finally:
            self.lock.release()

    def close(self):
        self.lock.acquire(True)
        try:
            if self.is_closed:
                raise FileClosedError
            else:
                if self.pending_data != None and self.pending_offset != None:
                    self.LPfile.writeat(self.pending_data, self.pending_offset)

                self.pending_data = None
                self.pending_offset = None
                self.LPfile.close()
                self.is_closed = True
        finally:
            self.lock.release()


def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()
