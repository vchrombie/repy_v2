"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"
WRITE_LOCK = createlock()


class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)

        self.closed = False
        self.filename = filename
        self.filesize = len(self.readat(None, 0))
        self.old_filesize = self.filesize

        self.pending_data = None
        self.pending_offset = None


    def readat(self, bytes, offset):
        return self.LPfile.readat(bytes, offset)


    def writeat(self, data, offset):
        if isinstance(offset, bool):
            raise RepyArgumentError("Argument number 2 to function 'LPFile.writeat' cannot be a boolean!")
        if offset < 0:
            raise RepyArgumentError("Negative read offset specified!")

        WRITE_LOCK.acquire(True)
        try:
            if self.closed:
                raise FileClosedError("File '" + self.filename + "' is already closed!")
            if offset > self.filesize:
                raise SeekPastEndOfFileError("Seek offset extends past the EOF!")

            self.commit()

            self.pending_data = data
            self.pending_offset = offset

            self.old_filesize = self.filesize
            if offset + len(data) > self.filesize:
                self.filesize = offset + len(data)
        finally:
            WRITE_LOCK.release()
 

    def undo(self):
        WRITE_LOCK.acquire(True)
        self.pending_data = None
        self.pending_offset = None
        self.filesize = self.old_filesize
        WRITE_LOCK.release()


    def close(self):
        WRITE_LOCK.acquire(True)
        try:
            if self.closed:
                raise FileClosedError("File '" + self.filename + "' is already closed!")

            self.commit()
            self.LPfile.close()
            self.closed = True
            self.pending_data = None
            self.pending_offset = None
            self.filesize = 0
            self.old_filesize = 0
        finally:
            WRITE_LOCK.release()


    def commit(self):
        if self.pending_data != None and self.pending_offset !=None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)


def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()
