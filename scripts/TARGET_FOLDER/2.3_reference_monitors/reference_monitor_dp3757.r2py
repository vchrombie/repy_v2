TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.filename = filename

        # DQ
        self.pending_data = None
        self.pending_offset = None


        # Track E
        self.pending_eof = len(self.LPfile.readat(None, 0));
        self.old_eof = self.pending_eof;

        # FC
        self.closed = False;

    def readat(self, bytes, offset):
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        if not self.pending_data == None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)


        if(offset < 0):
            raise RepyArgumentError("Min value is 0")
        

        if(self.closed):
            raise FileClosedError("File '" + self.filename + "' is already closed!")
        
    
        
        if(offset > self.pending_eof):
            raise SeekPastEndOfFileError("Seek offset extends past the EOF!")
        

        # Adding data 
        self.pending_data = data
        self.pending_offset = offset
        

        # Storing
        self.old_eof = self.pending_eof

        # If data extends eof, add on to it
        self.pending_eof = max(self.pending_offset + len(self.pending_data), self.pending_eof)

    def undo(self):
        self.pending_data = None
        self.pending_offset = None

        # Resets eof
        self.pending_eof = self.old_eof


    def close(self):
        if not self.pending_data == None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.LPfile.close()
        self.closed = True;
        

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()