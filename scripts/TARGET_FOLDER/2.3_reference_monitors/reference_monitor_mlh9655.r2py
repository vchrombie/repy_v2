"""
Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python2 repy.py restrictions.default encasementlib.r2py reference_monitor_mlh9655.r2py attack.r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        
        mycontext['debug'] = False
        
        #if # FILE ALREADY OPEN FileInUseError
        #if # FILENAME INVALID 
        #if # CREATE FALSE AND FILE NOT FOUND FileNotFoundError

        # this should handle all above exceptions manually
        try: 
            self.LPfile = openfile(filename, create)
        except Exception as e:
            raise(e)
            return
        else:
            self.lock = createlock()
    
        # my variables
        self.closed = False
        self.pending_data = None
        self.pending_offset = None

        # Original EOF setting so that readat can be called
        self.eof = 0;
        # find/track real EOF
        self.eof = len( self.readat(None, 0) )
        self.pending_eof = self.eof
        # "eof" simply stores the length of the file data

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...

        try: 
            self.lock.acquire(True)

            # Exception checking 
            if offset < 0 :
                raise RepyArgumentError("Offset cannot be less than zero");
            if bytes != None :
                if bytes < 0 :
                    raise RepyArgumentError("Size to read cannot be less than zero");
            if self.closed:
                raise FileClosedError("File is closed") 
            if offset > self.eof :
                raise SeekPastEndOfFileError("Cannot read past End Of FIle")

            return self.LPfile.readat(bytes, offset)
            
        except Exception as e:
            raise(e)
        finally:
            self.lock.release()
        
        
    def writeat(self, data, offset):
        
        try: 
            self.lock.acquire(True)
            # ADD EXCEPTION CHECKING HERE
            if offset < 0 :
                raise RepyArgumentError("Offset cannot be less than zero");
            if self.closed :
                raise FileClosedError("File is closed") 
            if offset > self.pending_eof :
                raise SeekPastEndOfFileError("Offset cannot exceed the End Of File");

            # IF pending data exists, WRITE to file, UPDATE ACTUAL eof
            if self.pending_data != None :
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.eof = self.pending_eof

            # UPDATE pending data
            self.pending_data = data
            self.pending_offset = offset

            # CALCULATE NEW PENDING eof
            if self.eof > offset + len(data) :
                self.pending_eof = self.eof
                # overwrite without extending, no change in eof
            else :
                self.pending_eof =  len(data) + offset  
        except Exception as e: 
            raise(e)
        finally: 
            self.lock.release()        

    def undo(self):

        self.lock.acquire(True)

        if self.closed == False :
            self.pending_data = None
            self.pending_offset = None
            self.pending_eof = self.eof

        self.lock.release()
        

    def close(self):
        
        self.lock.acquire(True)
        try: 
            # exception checking
            if self.closed :
                raise FileClosedError("File is closed") 
            else: 
                if self.pending_data != None :
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                    self.eof = self.pending_eof
                # UPDATE pending data
            # self.pending = false
            self.pending_data = None
            self.pending_offset = None

            self.closed = True
            self.LPfile.close()                
        except Exception as e:
            raise(e)
        finally:
            self.lock.release()



def LPopenfile(filename, create):  
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()