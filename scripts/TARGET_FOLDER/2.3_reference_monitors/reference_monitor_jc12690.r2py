TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.previous_edits = []
        self.pending_data = None
        self.pending_offset = None
        self.closed = False
        self.empty = True # Sees if the file is empty
        self.lock = createlock() # Creates a lock for file ops
        self.len = len(self.LPfile.readat(None,0))

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        self.len = len(self.LPfile.readat(None,0))
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            # Check to see if file is closed before writing
            if self.closed:
                raise FileClosedError("Cannot write to a closed file!")

            # Check to see if the offset is larger than the file itself
            if offset > self.len:
                raise SeekPastEndOfFileError("Offset extends past the EOF.")
            if offset < 0:
                raise RepyArgumentError("Cannot write with a negative offset!")
            if self.previous_edits:
                last_edit = self.previous_edits.pop()
                self.LPfile.writeat(last_edit[0], last_edit[1])
            # Check to see if the offset is greater than the current file size before writing: encountered an issue where, with one test case, a second write with an offset of 1 following a write with an offset of 0 threw an error, and nothing was written
            if offset + len(data) > self.len:
                self.len = offset + len(data)

            self.previous_edits.append((data,offset))
            self.empty = False
        finally:
            self.lock.release()

    def set_state(self, new_state):
        self.previous_edits.append(self.current_state)
        self.current_state = new_state

    def undo(self):
        self.lock.acquire(True)
        try:
            if self.closed:
                log("Cannot undo on a closed file!")
            if self.previous_edits:
                self.previous_edits.pop()
        finally:
            self.lock.release()

    def close(self):
        self.lock.acquire(True)
        try:
            if self.previous_edits:
                last_edit = self.previous_edits.pop()
                self.LPfile.writeat(last_edit[0], last_edit[1])
            self.LPfile.close()
            self.closed = True
        finally:
            self.lock.release()

    def is_empty(self):
        self.lock.acquire(True)
        try:
            return self.len == 0
        finally:
            self.lock.release()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()