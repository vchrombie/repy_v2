"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data, self.pending_offset = None, None
        self.EOF = len(self.LPfile.readat(None, 0))
        self.closed = False
        self.lock = createlock()


    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        if offset < 0 or (bytes < 0 and bytes != None):
            raise RepyArgumentError("Invalid Input")
        if offset > self.EOF:
            raise SeekPastEndOfFileError("Invalid Offset")
        if self.closed:
            raise FileClosedError("FileClosedError")

        self.lock.acquire(True)
        readingFile = self.LPfile.readat(bytes, offset)
        self.lock.release()
        return readingFile


    def writeat(self, data, offset):
        if not isinstance(data, str) or type(offset) == bool or not isinstance(offset, int):
            raise RepyArgumentError("Invalid Arg")
        if offset < 0:
            raise RepyArgumentError("Invalid offset")
        if not isinstance(data, str):
            raise RepyArgumentError("Invalid Data")
        if self.closed:
            raise FileClosedError("FileClosedError")

        self.lock.acquire(True)

        if self.pending_data is not None:
            try:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.EOF = max(self.EOF, self.pending_offset + len(self.pending_data))
            except:
                self.lock.release()
                raise Exception("Error")
        if offset > self.EOF:
            self.lock.release()
            raise SeekPastEndOfFileError("Invalid Offset")
        self.pending_data = data
        self.pending_offset = offset

        self.lock.release()

        if offset > self.EOF:
            raise SeekPastEndOfFileError("Invalid Offset")

    def undo(self):
        self.lock.acquire(True)
        self.pending_data, self.pending_offset = None, None
        self.lock.release()


    def close(self):
        if self.closed:
            raise FileClosedError("Closed")
        if self.pending_data != None and self.pending_offset != None:
            self.writeat(self.pending_data, self.pending_offset)
        self.lock.acquire(True)
        self.pending_data = None
        self.pending_offset = None
        self.closed = True
        try:
            self.LPfile.close()
        except FileClosedError:
            self.lock.release()
            raise FileClosedError("file already closed")
        self.lock.release()


def LPopenfile(filename, create):
    if not isinstance(filename, str) or not isinstance(create, bool):
        raise RepyArgumentError("Invalid Type")
    if filename in ["",".",".."] or filename[0] == ".":
        raise RepyArgumentError("Invalid filename")
    for char in filename:
        if char not in "abcdefghijklmnopqrstuvwxyz0123456789.-_":
            raise RepyArgumentError("Invalid filename")
    if create == False:
        try:
            file = openfile(filename, False)
            file.close()
        except:
            raise FileNotFoundError("filename is not found")
    try:
        file = openfile(filename, create)
        file.close()
    except Exception:
        raise FileInUseError("File already opened")
    lock = createlock()
    lock.acquire(True)
    return LPFile(filename, create)
    lock.release()

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()