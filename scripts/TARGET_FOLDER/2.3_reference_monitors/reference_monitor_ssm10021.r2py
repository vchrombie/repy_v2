"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        # store file, pending data and offset, closed flag
        # and ind after last cahr
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.is_closed = False
        self.file_len = len(self.LPfile.readat(None, 0))
        self.pending_file_len = 0
        self.lock = createlock()

    def readat(self, bytes, offset):
        self.lock.acquire(True)
        try:
            result = self.LPfile.readat(bytes, offset)
        
        # catch exception is raised, release lock and raise
        # to avoid deadlock
        except Exception:
            self.lock.release()
            raise
        self.lock.release()
        return result   

    def writeat(self, data, offset):
        self.lock.acquire(True)
        try:
            # RepyArgumentError
            # offset must be positive and data must be a string
            if (offset < 0) or (type(data) != str):
                raise RepyArgumentError
            
            # FileClosedError
            # check if the file open
            if self.is_closed:
                raise FileClosedError
            
            # SeekPastEndOfFileError
            # check if offset beyond EOF
            if offset > max(self.file_len, self.pending_file_len):
                raise SeekPastEndOfFileError

            # commit pending write if there is one
            if self.pending_data != None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.file_len = max(self.file_len, self.pending_file_len)
            
            # update pending data
            self.pending_data = data
            self.pending_offset = offset
            self.pending_file_len = self.pending_offset + len(self.pending_data)
        
        # catch exception is raised, release lock and raise
        # to avoid deadlock
        except Exception:
            self.lock.release()
            raise
        self.lock.release()

    def undo(self):
        self.lock.acquire(True)
        # wipe pending data and offset if open
        if self.is_closed:
            self.lock.release()
            return
        self.pending_file_len = 0 
        self.pending_data = None
        self.pending_offset = None
        self.lock.release()

    def close(self):
        self.lock.acquire(True)
        try:
            # commit pending write if there is one
            if self.pending_data != None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.file_len = max(self.file_len, self.pending_file_len)
                self.pending_file_len = 0
                self.pending_data = None
                self.pending_offset = None
            
            # set close flag and close
            self.LPfile.close()
            self.is_closed = True
        
        # catch exception is raised, release lock and raise
        # to avoid deadlock
        except Exception:
            self.lock.release()
            raise
        self.lock.release()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()

# python2 repy.py restrictions.default encasementlib.r2py reference_monitor_ssm10021.r2py ssm10021_attackcase.r2py
# for referencemonitor in reference_monitor_*; do echo $referencemonitor under test; for testcase in ssm10021_*; do python repy.py restrictions.default encasementlib.r2py $referencemonitor $testcase; done; done
# /Users/sarahmoughal/Documents/School/2023\ Fall/CS-UY\ 3923\ Computer\ Security/Assignment\ 2,\ Part\ 3/RepyV2_Sandbox
# for attackcase in *_attackcase*; do echo "Testing against $attackcase"; python2 /Users/sarahmoughal/Documents/School/2023\ Fall/CS-UY\ 3923\ Computer\ Security/Assignment\ 2,\ Part\ 3/RepyV2_Sandbox/repy.py /Users/sarahmoughal/Documents/School/2023\ Fall/CS-UY\ 3923\ Computer\ Security/Assignment\ 2,\ Part\ 3/RepyV2_Sandbox/restrictions.default /Users/sarahmoughal/Documents/School/2023\ Fall/CS-UY\ 3923\ Computer\ Security/Assignment\ 2,\ Part\ 3/RepyV2_Sandbox/encasementlib.r2py reference_monitor_ssm10021.r2py $attackcase; done;
# for attackcase in *_attackcase*; do echo "Testing against $attackcase"; python2 ../repy.py ../restrictions.default ../encasementlib.r2py reference_monitor_ssm10021.r2py $attackcase; done;