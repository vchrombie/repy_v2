"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

# here one approach could be that we do not write to the file until the very end (i.e. close happens)
# we maintain a buffer which will keep storing the offset and the data to be put at that offset
# and undo operation will just pop the last operation(data+offset) stored in the buffer
# Tho this is possible this will be a violation of the specification that we need to write to the file
# after a subsequent valid writeat

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.filename = filename
	self.lock = createlock()
	self.lock.acquire(True)
        self.LPfile = openfile(filename, create)
        self.pending_data = []
        self.pending_offset = None
        # calculating the length of file initially
        try:
            self.length_of_file = len(self.LPfile.readat(None, 0))
        except (RepyArgumentError, FileClosedError, SeekPastEndOfFileError) as error:
            pass
	self.lock.release()

    def readat(self, bytes, offset):
	self.lock.acquire(True)
        # Read from the file using the sandbox's readat...
	if (offset < 0):
	    self.lock.release()
            raise RepyArgumentError('Min value is 0')
        if (self.LPfile == None):
	    self.lock.release()
            raise FileClosedError("File '" + self.filename + "' is already closed!")
	
        self.lock.release()
        return self.LPfile.readat(bytes, offset)


    def writeat(self, data, offset):
	self.lock.acquire(True)
	
        if (offset < 0):
	    self.lock.release()
            raise RepyArgumentError('Min value is 0')
        if (self.LPfile == None):
	    self.lock.release()
            raise FileClosedError("File '" + self.filename + "' is already closed!")
        
        elif (offset <= self.length_of_file):
            lof = max(self.length_of_file, offset + len(data))
            self.length_of_file = lof
    
        elif (offset > self.length_of_file):
	    self.lock.release()
            raise SeekPastEndOfFileError('Seek offset extends past the EOF!')
        
       
        if (self.pending_data and self.pending_offset != None):
            self.LPfile.writeat(self.pending_data.pop(), self.pending_offset)
        
        self.pending_data.append(data)
        self.pending_offset = offset
	self.lock.release()

    def undo(self):
	self.lock.acquire(True)
	if self.pending_data:
	    self.length_of_file = self.length_of_file - len(self.pending_data[0])
        self.pending_data = []
        self.pending_offset = None
	self.lock.release()

    def close(self):
   	self.lock.acquire(True)
	try:
		if self.LPfile is None:
			raise FileClosedError("File '"+str(self.filename)+"' is already closed!")
		if (self.pending_data and self.pending_offset != None):
			self.LPfile.writeat(self.pending_data.pop(), self.pending_offset)
		self.LPfile.close()
		self.LPfile = None
	finally:
		self.lock.release()		

def LPopenfile(filename, create):
	return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()