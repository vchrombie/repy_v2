"""
This security layer effectively handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.length = len(self.LPfile.readat(None, 0))
        self._write_lock = createlock()

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        self._write_lock.acquire(True)

        try:
            # RepyArgumentError is raised if the offset is negative.
            if offset < 0:
                raise RepyArgumentError("Min value is 0.")

            # SeekPastEndOfFileError is raised if trying to write past the EOF.
            if offset > self.length:
                raise SeekPastEndOfFileError(
                    'Seek offset extends past the EOF!')

            # If there's pending data, write it first.
            if self.pending_data is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.length = max(
                    self.length, self.pending_offset + len(self.pending_data)
                )

            # Set current data as pending.
            self.pending_data = data
            self.pending_offset = offset

        finally:
            self._write_lock.release()

    def undo(self):
        self._write_lock.acquire(True)

        try:
            # Clear out any pending write operation.
            self.pending_data = None
            self.pending_offset = None

        finally:
            self._write_lock.release()

    def close(self):
        self._write_lock.acquire(True)

        try:
            # If there's pending data when closing, write it to the file.
            if self.pending_data is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.length = max(
                    self.length, self.pending_offset + len(self.pending_data)
                )

            self.LPfile.close()

        finally:
            self._write_lock.release()


def LPopenfile(filename, create):
    return LPFile(filename, create)


# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()
