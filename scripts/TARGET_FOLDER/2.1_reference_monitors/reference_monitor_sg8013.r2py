""" This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.locked = createlock()
        
        

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.LPfile.readat(bytes, offset)
        #readat() does not need to be changed
    def writeat(self, data, offset):
        self.locked.acquire(True)
        try:

            if self.pending_data is None:
                self.pending_data = data
                self.pending_offset = offset
                #debugging log statements:
                #log("1pending data", self.pending_data)
                #log("1pending offset", self.pending_offset)


            else: 
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                #debugging log statements:
                #log("pending data", self.pending_data)
                #log("pending offset", self.pending_offset)

                self.pending_data = data
                self.pending_offset = offset

                    
        except Exception as e:
                # Handle and raise exceptions
            raise RepyArgumentError  

        finally:          
            self.locked.release()


    def undo(self):
        self.locked.acquire(True)
        try:
            if self.pending_data is not None:
                self.pending_data = None
                self.pending_offset = None


        except Exception as e:
                # Handle and raise exceptions
            raise RepyArgumentError  

        finally:          
                   
            self.locked.release()

    def close(self):
        #FileClosedError is raised if the file is already closed.
        self.locked.acquire(True)
        try:
            if self.LPfile is None:
                raise FileClosedError("This file is closed")     
            else:
                if self.pending_data is not None:
                    if self.LPfile.readat(0,1):
                        raise RepyArgumentError
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                    #debugging log statements:
                    #log("permanent pending data", self.pending_data)
                    #log("permenant pending offset", self.pending_offset)

        #The changes will only be permanent after the file is closed
                    self.LPfile.close()

        except Exception as e:
                # Handle and raise exceptions
            raise RepyArgumentError  

        finally:          
            self.locked.release()            

def LPopenfile(filename, create):
    return LPFile(filename, create) 

    

    
# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()







