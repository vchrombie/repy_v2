TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'
        self.temp_file = filename

        # make the files and add 'SE' to the readat file...
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)

        if create:
            self.Afile.writeat('SE', 0)
            self.Bfile.writeat('SE', 0)

        self.temp_file = openfile(self.temp_file, create)
        self.closed = False
        self.pending_data = None
        self.pending_offset = None

    def readat(self, bytes, offset):
        self._check_file_state()
        if not isinstance(bytes, (int, long)) or not isinstance(offset, (int, long)):
            raise Exception("Invalid bytes or offset")
        data = self.Afile.readat(bytes, offset)
        return data

    def writeat(self, data, offset):
        self._check_file_state()
        current_data = self.Afile.readat(len(data), offset)
        self.pending_data = current_data
        self.pending_offset = offset
        self.Afile.writeat(data, offset)


    def undo(self):
        self._check_file_state()
        if self.pending_data is not None and self.pending_offset is not None:
            self.Afile.writeat(self.pending_data, self.pending_offset)
            self.pending_data = None
            self.pending_offset = None

    def _authenticate_the_file_path(self, filename):
        # Basic file path authentication and without any issues
        for char in r'<>"*?:/\|':
            if char in filename:
                raise Exception("Invalid characters in authentication")


    def close(self):
        self._check_file_state()
        self.Afile.close()
        self.Bfile.close()
        self.closed = True

    def _check_file_state(self):
        if self.closed:
            raise Exception("File is closed")

def LPopenfile(filename, create):
  return LPFile(filename,create)


# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()