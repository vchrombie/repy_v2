"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        mycontext['closed'] = False
        mycontext['valid'] = False
        mycontext['undo'] = False
        mycontext['prev_data'] = ""
        mycontext['prev_offset'] = 0

        self.LPfile = openfile(filename, create) 
        mycontext['length'] = len(self.LPfile.readat(None, 0))
        self.pending_data = None
        self.pending_offset = None
        self.lock = createlock()

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        if mycontext['closed'] == False:
            return self.LPfile.readat(bytes, offset)
        else:
            return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset):
        self.lock.acquire(True)
        # trying to write to an already closed file
        if mycontext['closed'] == True: 
            self.LPfile.close()

        # writing to an open file
        if mycontext['closed'] == False:

            # finding length of file
            if mycontext['length'] >= offset and offset >= 0:
                if (len(data) + offset) > mycontext['length']:
                    mycontext['length'] = (len(data) + offset)

                # negative offset
                elif offset < 0:
                    self.LPfile.writeat("Null", -1)
                    mycontext['valid'] == False

                # writing past end of file
                elif offset > mycontext['length']:
                    self.LPfile.writeat("Null", offset)
                    mycontext['valid'] == False
        
        # check for a valid write 
        if mycontext['valid'] == True:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            mycontext['prev_data'] = self.pending_data
            mycontext['prev_offset'] = self.pending_offset
            mycontext['undo'] = True
        
        # valid write hasn't happened yet
        else: 
            if mycontext['length'] >= offset and offset >= 0:
                mycontext['valid'] = True
            
        self.pending_data = data
        self.pending_offset = offset
        self.lock.release()

    def undo(self):
        self.lock.acquire(True)
        if mycontext['closed'] == False and mycontext['undo'] == True:
            mycontext['length'] -= len(self.pending_data)
            self.pending_data = mycontext['prev_data']
            self.pending_offset = mycontext['prev_offset']
            mycontext['undo'] = False
        self.lock.release()

    def close(self):
        if mycontext['closed'] == False: 
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            mycontext['closed'] = True
        self.LPfile.close()
        mycontext['undo'] = False
    
def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()