"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.previous_data = None
        self.previous_offset = None

    def readat(self, bytes, offset):
        return self.LPfile.readat(bytes, offset)
        
    def writeat(self, data, offset):
        length = self.LPfile.readat(None, 0)
        len_length = len(length)                
        if self.pending_data != None and self.pending_offset != None:
            self.previous_data = self.LPfile.readat(len(self.pending_data), self.pending_offset)
            self.previous_offset = self.pending_offset
        else:
            pass
        if data is None:
            if offset is None:
                raise ValueError("Sorry, Data and offset are null values ")
            else:
                raise ValueError("Sorry, Data is a null value")

        elif offset is None:
            if data is None:
                raise ValueError("Sorry, Offset and Data are null values ")
            else:
                raise ValueError("Sorry, Offset is a null value")

        elif offset>len_length:
            raise EOFError("Sorry, offset value exceeds the length of the file.")
            
        elif offset<0:
            raise ValueError("Sorry, offset value is negative. Please provide a postive value.")
        else:
            if self.pending_data != None and self.pending_offset != None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.pending_data = data
            self.pending_offset = offset

    def undo(self):
        length = self.LPfile.readat(None, 0)
        len_length = len(length)
        if len_length <= 0:
            return 
        else:
            self.pending_data = None
            self.pending_offset = None

    def close(self):
        if self.pending_data != None and self.pending_offset != None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()