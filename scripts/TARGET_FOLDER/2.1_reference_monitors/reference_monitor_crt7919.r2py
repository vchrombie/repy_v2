"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        mycontext['debug'] = False # Flag for debugging
        self.LPfile = openfile(filename, create) # Reference to a file internally        
        self.shadow_data = self.LPfile.readat(None, 0) # Create shadow copy of initial file for undo
        self.pending_data = None
        self.pending_offset = None

    def readat(self, bytes, offset): # Method that reads from the file at specific offset
        return self.LPfile.readat(bytes, offset)

    def writeat(self, data, offset): # Method that writes from the file at specific offset
        if self.pending_data is not None: # Write file is pending data
            self.LPfile.writeat(self.pending_data, self.pending_offset)
            # Updates shadow copy
            self.shadow_data = self.LPfile.readat(None, 0)

        self.pending_data = data
        self.pending_offset = offset

    def undo(self): # Method to undo last write operation
        # Pending data means discard it
        if self.pending_data is not None:
            self.pending_data = None
            self.pending_offset = None
            self.LPfile.writeat(self.shadow_data, 0)

    def close(self): # Method to close file
        if self.pending_data is not None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# This section sets up type checking and function definition for the security layer.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {
        TYPE: FUNC, 
        ARGS: (str, (int, long)), 
        EXCP: Exception, 
        RETURN: (int, type(None)), 
        TARGET: LPFile.writeat
    },
    "readat": {
        TYPE: FUNC, 
        ARGS: ((int, long, type(None)), (int, long)), 
        EXCP: Exception, 
        RETURN: str, 
        TARGET: LPFile.readat
    },
    "undo": {
        TYPE: FUNC, 
        ARGS: None, 
        EXCP: None, 
        RETURN: type(None), 
        TARGET: LPFile.undo
    },
    "close": {
        TYPE: FUNC, 
        ARGS: None, 
        EXCP: Exception, 
        RETURN: (bool, type(None)), 
        TARGET: LPFile.close
    }
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

secure_dispatch_module()