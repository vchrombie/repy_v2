"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        try:
            self.LPfile = openfile(filename, create)
        except:
            pass
        self.pending_data = None
        self.pending_offset = None
        # Flag to track file closure
        self.closed = False  

    def readat(self, bytes, offset):
        try:
        # Checking if the file is open and the offset is >= 0
            if not self.closed and offset >= 0:
                # Read from the file using the sandbox's readat...
                return self.LPfile.readat(bytes, offset)
            else:
                # Returning an empty string when the file is closed or offset is negative
                return ""
        except:
            return ""

    def writeat(self, data, offset):
        try:
            # Checking if the file is open and the offset is >= 0 and pending data is not empty
            if not self.closed and offset >=0 and self.pending_data is not None:
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
            self.pending_data = data
            self.pending_offset = offset
        except:
            pass

    def undo(self):
        self.pending_data = None
        self.pending_offset = None

    def close(self):
        try:
            # Checking if the file is not already closed
            if not self.closed:
                # To handle negative offsets
                if self.pending_offset >=0 and self.pending_data is not None:
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.LPfile.close()
            # Setting the flag to True to indicate file closure
                self.closed = True  
        except:
            pass

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()