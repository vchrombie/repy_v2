"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
# author: jacob
# N13899054
# 10/13/2023

TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"
class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        self.MAX_DATA_LENGTH = 1024
        self.close = False

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.LPfile.readat(bytes, offset)
    def writeat(self, data, offset):
        # Validate inputs
        if not isinstance(data, str):
            raise ValueError("")
        if not isinstance(offset, int) or offset < 0:
            raise ValueError("")
        if len(data) > self.MAX_DATA_LENGTH:
            raise ValueError("")
        
        # If there is a pending write, write it to the file
        if self.pending_data is not None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.pending_data = data
        self.pending_offset = offset

    def undo(self):
        if not self.close:
            self.pending_data = None
            self.pending_offset = None

    def close(self):
        # If there is a pending write, write it to the file before closing
        if self.pending_data is not None:
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        self.LPfile.close()
        self.close = True

def LPopenfile(filename, create):
    valid = True
    for c in filename:
        if not (c.islower() or c.isdigit() or c == '.'):
            valid = False
            break
    if not valid:
        raise ValueError("Invalid filename. The filename can only contain lowercase letters and numbers.")

    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()