# A6: If the negative offset is passed in the second write and undo is invoked immediately, check if the error is still raised. 
# EXPECTATION: If a negative offset is passed, it should raise a RepyArgumentError which is the default repy behaviour. 
# This attack specifically checks if this remains the case for the second writeat as well as we are using enhanced writeat that stores in a temporary variable before committing.
# The expectation is that RepyArgumentError should be raised nevertheless. If anything else is raised, or nothing is printed, then the behaviour is incorrect.

# NOTE: This attack will break the refernce monitors with syntax errors, erroneous writeat() as well as this specific attack outlined above - second writeat at invalid offset and undo.


# If the testfile exists in the directory, remove it
if "testfile.txt" in listfiles():
    removefile("testfile.txt")

# Create a new testfile
myfile=openfile("testfile.txt",True)

# Proper writeat with a valid offset
myfile.writeat("12345678",0)  # This is contingent on the fact that you can writeat() at a valid index without any errors or exceptions. 
# If this line itself fails, then there is no point in executing the following lines, i.e, attackcase1 (opening and writing) will break the security layer.



# Now try to add one more data but at a negative offset and then undo it to see if the error is still thrown.
# Expectation is that an error will be thrown as we are writing a negative offset data

try:
    # Negative offset writeat
    myfile.writeat("Hello World",-1)
    # But it is quickly undone 
    myfile.undo()
except RepyArgumentError:
    pass
except Exception as e:
    log("Attack 6 - ERROR | Writing to negative offset must raise a RepyArgumentError. Not a different exception\n\n")
else:
    # If no exception is raised, it is incorrect too. Should've raised RepyArgumentError
    log("Attack 6 - ERROR | Writing to negative offset must raise a RepyArgumentError.\n\n")
finally:
    exitall()


# Close the file
myfile.close()