"""
This security layer adequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py reference_monitor_vrk3366.r2py [attack_program].r2py   
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class accessUnit():
    def __init__(self, read=False, write=False, delete=False):
        self.r = read
        self.w = write
        self.d = delete
    
    def anyAccess(self):
        return self.r or self.w or self.d

mycontext['access'] = {
    'user': accessUnit(True, True, True),
    'txt': accessUnit(True, True, True),
    'r2py': accessUnit(False, False, False),
    'py': accessUnit(True, False, False),
    'root': accessUnit(False, False, False)
}

def ext(filename):
    return filename.split('.')[-1]

def checkHit(bullet):
    shot = mycontext['access'].get(bullet)
    return shot

def safeRemoval(filename):
    hit = checkHit(ext(filename))

    if hit is not None:
        if hit.d:
            return removefile(filename)

CHILD_CONTEXT_DEF["removefile"] = {
    TYPE: FUNC,
    ARGS: (str,),
    EXCP: Exception,
    RETURN: None,
    TARGET: safeRemoval
}

class LPFile():
    def __init__(self, filename, create):
        # globals

        mycontext['debug'] = False

        self.fileAccess = checkHit(ext(filename))
        # assert(self.fileAccess not None)
        if self.fileAccess is None:
            self.fileAccess = mycontext['access']['root']

        self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None

        self.fileLock = createlock()

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        # assert(self.fileAccess.r)
        if self.fileAccess.r:
            return self.LPfile.readat(bytes, offset)
        return ''

    def writeat(self, data, offset):
        if self.pending_offset is not None:
            # assert(self.fileAccess.w)
            if self.fileAccess.w:
                self.fileLock.acquire(True)
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.fileLock.release()

        self.pending_data = data
        self.pending_offset = offset

    def undo(self):
        self.pending_data = None
        self.pending_offset = None

    def close(self):
        if self.pending_offset is not None:
            # assert(self.fileAccess.w)
            if self.fileAccess.w:
                self.fileLock.acquire(True)
                self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.fileLock.release()
    
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()