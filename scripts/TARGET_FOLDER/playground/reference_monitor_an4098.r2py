TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"

class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.MAX_OPEN_FILES = 100
        self.max_file_size = 1000000

        # The open files list has been created to keep track of open files and set a limit on it. It also checks for duplicate file opens.
        self._list_open_files = []
        if isinstance(filename, str) and isinstance(create, bool) and filename not in self._list_open_files and len(self._list_open_files) < self.MAX_OPEN_FILES and create and filename not in listfiles():
            self.LPfile = openfile(filename, create)
            self._list_open_files.append(filename)

        self.pending_data = None
        self.pending_offset = None
        self.is_closed = False
        self.file_size = 0
        self.lock = createlock()

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat. The code here validates a couple of things before performing the read:
        # 1) The bytes and offset arguments are of correct type
        # 2) The offset value is greater than 0
        # 3) The file is not closed
        # 4) The offset and bytes are not greater than the file size to handle EOF issues
        # 5) The read does not go beyond the file size

        if isinstance(bytes, (int, long)) and isinstance(offset, (int, long)) and offset >= 0 and not self.is_closed and not offset > self.file_size and not bytes > self.file_size and offset + bytes <= self.file_size:
            return self.LPfile.readat(bytes, offset)
        else:
            return ""

    def writeat(self, data, offset):
        # The code here validates a couple of things before performing the write:
        # 1) The data and offset arguments are of correct type
        # 2) The offset value is greater than 0
        # 3) The file is not closed
        # 4) The offset is not greater than the file size to handle EOF issues
        # 5) The text data is not too large for the processor to handle. Limit can be adjusted in the init function

        # There is also a lock implementation to ensure only one thread can run this process. Multiple threads running at the same time may result in data corruption or race condition issues.

        if isinstance(data, str) and isinstance(offset, (int, long)) and offset >= 0 and not self.is_closed and not offset > self.file_size and offset + len(data) <= self.max_file_size:
            if self.lock.acquire(True):
                if self.pending_data is not None and self.pending_offset is not None:
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
                self.pending_data = data
                self.pending_offset = offset
                if offset + len(data) > self.file_size:
                    self.file_size = offset + len(data)
            self.lock.release()

    def undo(self):
        if self.pending_data is not None and self.pending_offset is not None and not self.is_closed:
            self.pending_data = None
            self.pending_offset = None

    def close(self):
        # The code here validates if the file is closed or not.
        # The code here writes changes to the file when the file is closed.

        if not self.is_closed:
            if self.pending_data is not None and self.pending_offset is not None:
                self.LPfile.writeat(self.pending_data, self.pending_offset)
            if self.LPfile in self._list_open_files:
                self._list_open_files.remove(self.LPfile)
            self.LPfile.close()
            self.is_closed = True

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()