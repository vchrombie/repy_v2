"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        #check if filename is not None and openable.
        if (filename != None):
            mycontext['debug'] = False
            #do try to make sure this file is openable.
            try:
                self.LPfile = openfile(filename, create)
        self.pending_data = None
        self.pending_offset = None
        #create two temp variable to ensure those data and offset is not modified.
        self.pending_data_check = None
        self.pending_offset_check = None

    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        # Apply lock here to ensure nothing is changed during the read functionality
        self.lock = createlock()
        self.lock.acquire(True)
        # In here, check the read is not out of bound which will create error: (bytes and offset between max and 0)
        max_length = len(self.LPfile.readat(None,0))
        if (offset > 0 or offset == 0) and (offset < max_length) and (bytes != None) and (bytes < max_length) and (bytes > 0 or bytes == 0):
            self.lock.release()
            return self.LPfile.readat(bytes, offset)
        else:
            self.lock.release()

    def writeat(self, data, offset):
        #first create the lock
        self.lock = createlock()
        self.lock.acquire(True)
        #check if the input is none.
        if (self.pending_data!=None) and (self.pending_offset!=None):
            #now, check if the backup has the same value here.
            if (self.pending_data == self.pending_data_check) and (self.pending_offset == self.pending_offset_check):
                #last, check if the offset is out-of-bound
                if (self.pending_offset > 0 or self.pending_offset == 0):
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
            else:
                if (self.pending_offset_check > 0 or self.pending_offset_check == 0):
                    self.LPfile.writeat(self.pending_data_check, self.pending_offset_check)
        # now update the new data and offset
        self.pending_data = data
        self.pending_data_check = data
        self.pending_offset = offset
        self.pending_offset_check = offset
        # last release the lock
        self.lock.release()

    def undo(self):
        #These will undo the last change.
        #First as always, apply the lock here.
        self.lock = createlock()
        self.lock.acquire(True)
        #if the data is already none, then do nothing.
        if (self.pending_data!=None) and (self.pending_offset!=None):
            self.pending_data = None
            self.pending_offset = None
            self.pending_data_check = None
            self.pending_offset_check = None
        #Last, release the lock
        self.lock.release()

    def close(self):
        #As Instruction case 2, need to perform writeat when file is closed.
        #Do the check here first
        if (self.pending_data!=None) and (self.pending_offset!=None):
            #now, check if the backup has the same value here.
            if (self.pending_data == self.pending_data_check) and (self.pending_offset == self.pending_offset_check):
                #last, check if the offset is out-of-bound
                if (self.pending_offset > 0 or self.pending_offset == 0):
                    self.LPfile.writeat(self.pending_data, self.pending_offset)
            else:
                if (self.pending_offset_check > 0 or self.pending_offset_check == 0):
                    self.LPfile.writeat(self.pending_data_check, self.pending_offset_check)
        #Now, close the file.
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()