"""
Author: Tom Zhang, tyz212

Description
    - Creates an empty file, writes a change, undoes it, then writes another change. Finally, the file is read to assess its state.
Objective
    - Exploit reference monitors that incorrectly handle 'undo' or immediately commit writes to the file.
Errors
    - AssertionError
Notes
    - A logs from this attack will contain an [ATTACK_5 SUCCESS] identifier. Any log without this identifier was not produced by this attack.
"""

FILENAME = "test.txt"
CREATE = True
WRITE_DATA = "Hello world"
WRITE_OFFSET = 0
READ_BYTES = None
READ_OFFSET = 0


def log_success(message):
    log("[ATTACK_5 SUCCESS] %s\n" % message)


def main():
    try:
        if FILENAME in listfiles():
            removefile(FILENAME)

        # empty file
        test_file = openfile(FILENAME, CREATE)

        test_file.writeat(WRITE_DATA, WRITE_OFFSET)
        test_file.undo()

        # This write should not be committed
        test_file.writeat(WRITE_DATA, WRITE_OFFSET)

        # Assert that file is empty
        actual = test_file.readat(READ_BYTES, READ_OFFSET)
        assert("" == actual)

        test_file.close()

    except AssertionError:
        log_success("Expected empty string but got '%s'" % actual)

    except Exception:
        pass

if callfunc == "initialize":
    main()