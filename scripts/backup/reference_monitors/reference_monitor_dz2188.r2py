"""
This security layer inadequately handles the undo functionality

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

"""
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class LPFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        self.LPfile = openfile(filename, create)
        self.pending_data, self.pending_offset = None, None
        self.undo, self.current = [], []
        self.undo_check, self.undo_st = False, None


    def readat(self, bytes, offset):
        # Read from the file using the sandbox's readat...
        return self.LPfile.readat(bytes, offset)

#works for -1, don't need to account for past EOF

    def writeat(self, data, offset):
        if self.pending_data is not None:
            self.undo = []
            #Add Whitespace if pending offset exceeds self.current
            while (self.pending_offset > len(self.current)):
                self.current.append(" ")

            #write data into current first, updating it
            for i in range(0, len(self.pending_data)):
                if (i+self.pending_offset >= len(self.current)):
                    self.undo.append(" ")
                    self.current.append(self.pending_data[i])
                else:
                    self.undo.append(self.current[i+self.pending_offset])
                    self.current[i+self.pending_offset] = self.pending_data[i]
            #Write new data for potential undo operation
            self.undo_st = self.pending_offset
            self.undo_check = True
            #Write text into file
            self.LPfile.writeat(self.pending_data, self.pending_offset)
        #Queue up new data regardless if self.pending_data == None
        self.pending_data = data
        self.pending_offset = offset

    def undo(self):
        if self.undo_check is True:
            #iterate across indexes of latest change and modify to conform
            for i in range(0, len(self.undo)):
                self.current[i+self.undo_st] = self.undo[i]
            self.LPfile.writeat("".join(self.undo), self.undo_st)
            #Flip to ensure cannot immediately do another undo operation
            self.undo_check, self.undo = False, []
        #log("undo",self.current, self.undo, "\n")


    def close(self):
        self.LPfile.close()

def LPopenfile(filename, create):
    return LPFile(filename, create)

# The code here sets up type checking and variable hiding for you.
# You should not need to change anything below here.
sec_file_def = {
    "obj-type": LPFile,
    "name": "LPFile",
    "writeat": {"type": "func", "args": (str, (int, long)), "exceptions": Exception, "return": (int, type(None)), "target": LPFile.writeat},
    "readat": {"type": "func", "args": ((int, long, type(None)), (int, long)), "exceptions": Exception, "return": str, "target": LPFile.readat},
    "undo": {"type": "func", "args": None, "exceptions": None, "return": type(None), "target": LPFile.undo},
    "close": {"type": "func", "args": None, "exceptions": Exception, "return": (bool, type(None)), "target": LPFile.close}
}

CHILD_CONTEXT_DEF["openfile"] = {
    TYPE: OBJC,
    ARGS: (str, bool),
    EXCP: Exception,
    RETURN: sec_file_def,
    TARGET: LPopenfile
}

# Execute the user code
secure_dispatch_module()